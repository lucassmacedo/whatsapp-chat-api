<?php
/**
 * Class2MessagesApi
 * PHP version 5
 *
 * @category Class
 * @package  WhatsAppChatApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Chat API SDK
 *
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WhatsAppChatApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WhatsAppChatApi\ApiException;
use WhatsAppChatApi\Configuration;
use WhatsAppChatApi\HeaderSelector;
use WhatsAppChatApi\ObjectSerializer;

/**
 * Class2MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  WhatsAppChatApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Class2MessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation forwardMessage
     *
     * Forwarding messages to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\ForwardMessageRequest $forward_message_request forward_message_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function forwardMessage($forward_message_request)
    {
        list($response) = $this->forwardMessageWithHttpInfo($forward_message_request);
        return $response;
    }

    /**
     * Operation forwardMessageWithHttpInfo
     *
     * Forwarding messages to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\ForwardMessageRequest $forward_message_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function forwardMessageWithHttpInfo($forward_message_request)
    {
        $request = $this->forwardMessageRequest($forward_message_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forwardMessageAsync
     *
     * Forwarding messages to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\ForwardMessageRequest $forward_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forwardMessageAsync($forward_message_request)
    {
        return $this->forwardMessageAsyncWithHttpInfo($forward_message_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forwardMessageAsyncWithHttpInfo
     *
     * Forwarding messages to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\ForwardMessageRequest $forward_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forwardMessageAsyncWithHttpInfo($forward_message_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->forwardMessageRequest($forward_message_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forwardMessage'
     *
     * @param  \WhatsAppChatApi\Model\ForwardMessageRequest $forward_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forwardMessageRequest($forward_message_request)
    {
        // verify the required parameter 'forward_message_request' is set
        if ($forward_message_request === null || (is_array($forward_message_request) && count($forward_message_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $forward_message_request when calling forwardMessage'
            );
        }

        $resourcePath = '/forwardMessage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($forward_message_request)) {
            $_tempBody = $forward_message_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMessages
     *
     * Get a list of messages.
     *
     * @param  int $last_message_number The lastMessageNumber parameter from the last response (optional)
     * @param  bool $last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param  string $chat_id Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param  int $limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param  int $min_time Filter messages received after specified time. Example: 946684800. (optional)
     * @param  int $max_time Filter messages received before specified time. Example: 946684800. (optional)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\Messages
     */
    public function getMessages($last_message_number = null, $last = false, $chat_id = null, $limit = null, $min_time = null, $max_time = null)
    {
        list($response) = $this->getMessagesWithHttpInfo($last_message_number, $last, $chat_id, $limit, $min_time, $max_time);
        return $response;
    }

    /**
     * Operation getMessagesWithHttpInfo
     *
     * Get a list of messages.
     *
     * @param  int $last_message_number The lastMessageNumber parameter from the last response (optional)
     * @param  bool $last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param  string $chat_id Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param  int $limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param  int $min_time Filter messages received after specified time. Example: 946684800. (optional)
     * @param  int $max_time Filter messages received before specified time. Example: 946684800. (optional)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\Messages, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessagesWithHttpInfo($last_message_number = null, $last = false, $chat_id = null, $limit = null, $min_time = null, $max_time = null)
    {
        $request = $this->getMessagesRequest($last_message_number, $last, $chat_id, $limit, $min_time, $max_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\Messages' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\Messages', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\Messages';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\Messages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMessagesAsync
     *
     * Get a list of messages.
     *
     * @param  int $last_message_number The lastMessageNumber parameter from the last response (optional)
     * @param  bool $last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param  string $chat_id Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param  int $limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param  int $min_time Filter messages received after specified time. Example: 946684800. (optional)
     * @param  int $max_time Filter messages received before specified time. Example: 946684800. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesAsync($last_message_number = null, $last = false, $chat_id = null, $limit = null, $min_time = null, $max_time = null)
    {
        return $this->getMessagesAsyncWithHttpInfo($last_message_number, $last, $chat_id, $limit, $min_time, $max_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessagesAsyncWithHttpInfo
     *
     * Get a list of messages.
     *
     * @param  int $last_message_number The lastMessageNumber parameter from the last response (optional)
     * @param  bool $last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param  string $chat_id Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param  int $limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param  int $min_time Filter messages received after specified time. Example: 946684800. (optional)
     * @param  int $max_time Filter messages received before specified time. Example: 946684800. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesAsyncWithHttpInfo($last_message_number = null, $last = false, $chat_id = null, $limit = null, $min_time = null, $max_time = null)
    {
        $returnType = '\WhatsAppChatApi\Model\Messages';
        $request = $this->getMessagesRequest($last_message_number, $last, $chat_id, $limit, $min_time, $max_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessages'
     *
     * @param  int $last_message_number The lastMessageNumber parameter from the last response (optional)
     * @param  bool $last Displays the last 100 messages. If this parameter is passed, then lastMessageNumber is ignored. (optional, default to false)
     * @param  string $chat_id Filter messages by chatId  Chat ID from the message list. Examples: 17633123456@c.us for private messages and 17680561234-1479621234@g.us for the group. (optional)
     * @param  int $limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param  int $min_time Filter messages received after specified time. Example: 946684800. (optional)
     * @param  int $max_time Filter messages received before specified time. Example: 946684800. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMessagesRequest($last_message_number = null, $last = false, $chat_id = null, $limit = null, $min_time = null, $max_time = null)
    {
        if ($last_message_number !== null && $last_message_number < 0) {
            throw new \InvalidArgumentException('invalid value for "$last_message_number" when calling Class2MessagesApi.getMessages, must be bigger than or equal to 0.');
        }


        $resourcePath = '/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($last_message_number !== null) {
            $queryParams['lastMessageNumber'] = ObjectSerializer::toQueryValue($last_message_number);
        }
        // query params
        if ($last !== null) {
            $queryParams['last'] = ObjectSerializer::toQueryValue($last);
        }
        // query params
        if ($chat_id !== null) {
            $queryParams['chatId'] = ObjectSerializer::toQueryValue($chat_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($min_time !== null) {
            $queryParams['min_time'] = ObjectSerializer::toQueryValue($min_time);
        }
        // query params
        if ($max_time !== null) {
            $queryParams['max_time'] = ObjectSerializer::toQueryValue($max_time);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendContact
     *
     * Sending a contact or contact list to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendContactRequest $send_contact_request send_contact_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function sendContact($send_contact_request)
    {
        list($response) = $this->sendContactWithHttpInfo($send_contact_request);
        return $response;
    }

    /**
     * Operation sendContactWithHttpInfo
     *
     * Sending a contact or contact list to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendContactRequest $send_contact_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendContactWithHttpInfo($send_contact_request)
    {
        $request = $this->sendContactRequest($send_contact_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendContactAsync
     *
     * Sending a contact or contact list to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendContactRequest $send_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendContactAsync($send_contact_request)
    {
        return $this->sendContactAsyncWithHttpInfo($send_contact_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendContactAsyncWithHttpInfo
     *
     * Sending a contact or contact list to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendContactRequest $send_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendContactAsyncWithHttpInfo($send_contact_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->sendContactRequest($send_contact_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendContact'
     *
     * @param  \WhatsAppChatApi\Model\SendContactRequest $send_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendContactRequest($send_contact_request)
    {
        // verify the required parameter 'send_contact_request' is set
        if ($send_contact_request === null || (is_array($send_contact_request) && count($send_contact_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_contact_request when calling sendContact'
            );
        }

        $resourcePath = '/sendContact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_contact_request)) {
            $_tempBody = $send_contact_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendFile
     *
     * Send a file to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendFileRequest $send_file_request send_file_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function sendFile($send_file_request)
    {
        list($response) = $this->sendFileWithHttpInfo($send_file_request);
        return $response;
    }

    /**
     * Operation sendFileWithHttpInfo
     *
     * Send a file to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendFileRequest $send_file_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendFileWithHttpInfo($send_file_request)
    {
        $request = $this->sendFileRequest($send_file_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendFileAsync
     *
     * Send a file to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendFileRequest $send_file_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendFileAsync($send_file_request)
    {
        return $this->sendFileAsyncWithHttpInfo($send_file_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendFileAsyncWithHttpInfo
     *
     * Send a file to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendFileRequest $send_file_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendFileAsyncWithHttpInfo($send_file_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->sendFileRequest($send_file_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendFile'
     *
     * @param  \WhatsAppChatApi\Model\SendFileRequest $send_file_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendFileRequest($send_file_request)
    {
        // verify the required parameter 'send_file_request' is set
        if ($send_file_request === null || (is_array($send_file_request) && count($send_file_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_file_request when calling sendFile'
            );
        }

        $resourcePath = '/sendFile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_file_request)) {
            $_tempBody = $send_file_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendLink
     *
     * Send text with link and link's preview to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLinkRequest $send_link_request send_link_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function sendLink($send_link_request)
    {
        list($response) = $this->sendLinkWithHttpInfo($send_link_request);
        return $response;
    }

    /**
     * Operation sendLinkWithHttpInfo
     *
     * Send text with link and link's preview to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLinkRequest $send_link_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendLinkWithHttpInfo($send_link_request)
    {
        $request = $this->sendLinkRequest($send_link_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendLinkAsync
     *
     * Send text with link and link's preview to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLinkRequest $send_link_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendLinkAsync($send_link_request)
    {
        return $this->sendLinkAsyncWithHttpInfo($send_link_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendLinkAsyncWithHttpInfo
     *
     * Send text with link and link's preview to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLinkRequest $send_link_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendLinkAsyncWithHttpInfo($send_link_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->sendLinkRequest($send_link_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendLink'
     *
     * @param  \WhatsAppChatApi\Model\SendLinkRequest $send_link_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendLinkRequest($send_link_request)
    {
        // verify the required parameter 'send_link_request' is set
        if ($send_link_request === null || (is_array($send_link_request) && count($send_link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_link_request when calling sendLink'
            );
        }

        $resourcePath = '/sendLink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_link_request)) {
            $_tempBody = $send_link_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendLocation
     *
     * Sending a location to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLocationRequest $send_location_request send_location_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function sendLocation($send_location_request)
    {
        list($response) = $this->sendLocationWithHttpInfo($send_location_request);
        return $response;
    }

    /**
     * Operation sendLocationWithHttpInfo
     *
     * Sending a location to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLocationRequest $send_location_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendLocationWithHttpInfo($send_location_request)
    {
        $request = $this->sendLocationRequest($send_location_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendLocationAsync
     *
     * Sending a location to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLocationRequest $send_location_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendLocationAsync($send_location_request)
    {
        return $this->sendLocationAsyncWithHttpInfo($send_location_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendLocationAsyncWithHttpInfo
     *
     * Sending a location to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendLocationRequest $send_location_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendLocationAsyncWithHttpInfo($send_location_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->sendLocationRequest($send_location_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendLocation'
     *
     * @param  \WhatsAppChatApi\Model\SendLocationRequest $send_location_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendLocationRequest($send_location_request)
    {
        // verify the required parameter 'send_location_request' is set
        if ($send_location_request === null || (is_array($send_location_request) && count($send_location_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_location_request when calling sendLocation'
            );
        }

        $resourcePath = '/sendLocation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_location_request)) {
            $_tempBody = $send_location_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendMessage
     *
     * Send a message to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendMessageRequest $send_message_request send_message_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function sendMessage($send_message_request)
    {
        list($response) = $this->sendMessageWithHttpInfo($send_message_request);
        return $response;
    }

    /**
     * Operation sendMessageWithHttpInfo
     *
     * Send a message to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendMessageRequest $send_message_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendMessageWithHttpInfo($send_message_request)
    {
        $request = $this->sendMessageRequest($send_message_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendMessageAsync
     *
     * Send a message to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendMessageRequest $send_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageAsync($send_message_request)
    {
        return $this->sendMessageAsyncWithHttpInfo($send_message_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendMessageAsyncWithHttpInfo
     *
     * Send a message to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendMessageRequest $send_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageAsyncWithHttpInfo($send_message_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->sendMessageRequest($send_message_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendMessage'
     *
     * @param  \WhatsAppChatApi\Model\SendMessageRequest $send_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendMessageRequest($send_message_request)
    {
        // verify the required parameter 'send_message_request' is set
        if ($send_message_request === null || (is_array($send_message_request) && count($send_message_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_message_request when calling sendMessage'
            );
        }

        $resourcePath = '/sendMessage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_message_request)) {
            $_tempBody = $send_message_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPTT
     *
     * Send a ptt-audio to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendPTTRequest $send_ptt_request send_ptt_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function sendPTT($send_ptt_request)
    {
        list($response) = $this->sendPTTWithHttpInfo($send_ptt_request);
        return $response;
    }

    /**
     * Operation sendPTTWithHttpInfo
     *
     * Send a ptt-audio to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendPTTRequest $send_ptt_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPTTWithHttpInfo($send_ptt_request)
    {
        $request = $this->sendPTTRequest($send_ptt_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendPTTAsync
     *
     * Send a ptt-audio to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendPTTRequest $send_ptt_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPTTAsync($send_ptt_request)
    {
        return $this->sendPTTAsyncWithHttpInfo($send_ptt_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPTTAsyncWithHttpInfo
     *
     * Send a ptt-audio to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendPTTRequest $send_ptt_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPTTAsyncWithHttpInfo($send_ptt_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->sendPTTRequest($send_ptt_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPTT'
     *
     * @param  \WhatsAppChatApi\Model\SendPTTRequest $send_ptt_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendPTTRequest($send_ptt_request)
    {
        // verify the required parameter 'send_ptt_request' is set
        if ($send_ptt_request === null || (is_array($send_ptt_request) && count($send_ptt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_ptt_request when calling sendPTT'
            );
        }

        $resourcePath = '/sendPTT';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_ptt_request)) {
            $_tempBody = $send_ptt_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendVCard
     *
     * Sending a vcard to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendVCardRequest $send_v_card_request send_v_card_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WhatsAppChatApi\Model\SendMessageStatus
     */
    public function sendVCard($send_v_card_request)
    {
        list($response) = $this->sendVCardWithHttpInfo($send_v_card_request);
        return $response;
    }

    /**
     * Operation sendVCardWithHttpInfo
     *
     * Sending a vcard to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendVCardRequest $send_v_card_request (required)
     *
     * @throws \WhatsAppChatApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WhatsAppChatApi\Model\SendMessageStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendVCardWithHttpInfo($send_v_card_request)
    {
        $request = $this->sendVCardRequest($send_v_card_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\WhatsAppChatApi\Model\SendMessageStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WhatsAppChatApi\Model\SendMessageStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WhatsAppChatApi\Model\SendMessageStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendVCardAsync
     *
     * Sending a vcard to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendVCardRequest $send_v_card_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendVCardAsync($send_v_card_request)
    {
        return $this->sendVCardAsyncWithHttpInfo($send_v_card_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendVCardAsyncWithHttpInfo
     *
     * Sending a vcard to a new or existing chat.
     *
     * @param  \WhatsAppChatApi\Model\SendVCardRequest $send_v_card_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendVCardAsyncWithHttpInfo($send_v_card_request)
    {
        $returnType = '\WhatsAppChatApi\Model\SendMessageStatus';
        $request = $this->sendVCardRequest($send_v_card_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendVCard'
     *
     * @param  \WhatsAppChatApi\Model\SendVCardRequest $send_v_card_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendVCardRequest($send_v_card_request)
    {
        // verify the required parameter 'send_v_card_request' is set
        if ($send_v_card_request === null || (is_array($send_v_card_request) && count($send_v_card_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_v_card_request when calling sendVCard'
            );
        }

        $resourcePath = '/sendVCard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_v_card_request)) {
            $_tempBody = $send_v_card_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('instanceId');
        if ($apiKey !== null) {
            $queryParams['instanceId'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
